% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/superLnr.R
\name{super_lnr}
\alias{super_lnr}
\title{Entity learners will be gathered together as one learner.}
\usage{
super_lnr(
  data,
  target,
  learner = "ranger",
  learner_args = list(),
  var_selec = "Boruta",
  var_selec_arg = list(),
  aggregation = "ranger.cved",
  aggregation_args = list()
)
}
\arguments{
\item{data}{A list containing data entities.}

\item{target}{The target variables.}

\item{learner}{The name of the to be called.}

\item{learner_args}{Arguments to be passed to the learner function.}

\item{var_selec}{The function name to be called for variable selection. Do not set this argument to avoid variable selection step.}

\item{var_selec_arg}{Arguments to be passed to the variable selection function.}

\item{aggregation}{The aggregation function to built the final learner.}

\item{aggregation_args}{The arguments of the aggregation function.}
}
\value{
A learner of class \code{super.lnr} containing:
\tabular{ll}{
   \code{layer_models} \tab The fitted model at each layer,\cr
   \code{aggregation_args} \tab The arguments of the aggregated function and\cr
   \code{aggregated_model} \tab The aggregated model.
 }
}
\description{
Entity learners will be gathered together as one learner.
}
\examples{
data(entities)
data(disease)
## Train layer and super learner
my_super_lnr <- super_lnr(data = entities,
                         target = disease,
                         learner = "ranger",
                         learner_args = list(methylation = list(mtry = 10,
                                                                probability = TRUE),
                                             genexpr = list(mtry = 10,
                                                            probability = TRUE),
                                             proteinexpr = list(mtry = 10,
                                                                probability = TRUE)),
                         var_selec = "Boruta_ext",
                         list(methylation = list(type = "probability"),
                              genexpr = list(type = "probability"),
                              proteinexpr = list(type = "probability")),
                         aggregation = ranger.cved,
                         aggregation_args = list(validation = "createFolds",
                                                 validation_args = list(),
                                                 final_learner = "ranger",
                                                 final_learner_args = list(mtry = 1,
                                                                           probability = TRUE)))
## Predict using the super learner
data(test_entities)
data(test_disease)
my_super_predictions <- predict(object = my_super_lnr, data = test_entities)
print(my_super_predictions)
## Brier score
print(mean((my_super_predictions$predictions[ , 1] - (test_disease == 2))^2))

}
