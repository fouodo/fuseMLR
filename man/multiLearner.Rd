% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiLearner.R
\name{multiLearner}
\alias{multiLearner}
\title{A learner is built for each layer and then aggregated as a super learner}
\usage{
multiLearner(
  data,
  target,
  learner = "ranger",
  learner_args = list(),
  var_selec = "Boruta",
  var_selec_arg = list()
)
}
\arguments{
\item{data}{A list containing data entities.}

\item{target}{The target variables.}

\item{learner}{The name of the learner to be called.}

\item{learner_args}{The arguments to be passed to learner.}

\item{var_selec}{The name of the variable selection method.}

\item{var_selec_arg}{The arguments to be passed to the variable selection method.}
}
\value{
Object of class \code{multiLearner} containing list elements:
\tabular{ll}{
   \code{layer} \tab The name of the layer, \cr
   \code{data} \tab The layer entity,\cr
   \code{target} \tab target variable, \cr
   \code{learner} \tab Name of the learner, e.g. \code{ranger},\cr
   \code{learner_args} \tab Arguments of the learner,\cr
   \code{var_selected} \tab Boolean vector with 1 for selected variable and 0 for non selected variable,\cr
   \code{model} \tab The fitted model.
 }
}
\description{
A learner is built for each layer and then aggregated as a super learner
}
\examples{
data(entities)
data(disease)
set.seed(321)
my_multiLearner <- multiLearner(data = entities,
target = disease,
learner = "ranger",
learner_args = list(methylation = list(probability = TRUE),
                    genexpr = list(probability = TRUE),
                    proteinexpr = list(probability = TRUE)),
var_selec = "Boruta_ext",
var_selec_arg = list(methylation = list(type = "probability",
                                        mtry.prop = 0.4),
                     genexpr = list(type = "probability",
                                    mtry.prop = 0.5),
                     proteinexpr = list(type = "probability",
                                        mtry.prop = 0.3)))
## Predict using the super learner
data(test_entities)
predict(object = my_multiLearner, data = test_entities)
}
